#!/usr/bin/env bash

# This is an RVM Project .rvmrc file, used to automatically load the ruby
# development environment upon cd'ing into the directory

# First we specify our desired <ruby>[@<gemset>], the @gemset name is optional.
environment_id="1.9.3-p125"

#
# Uncomment following line if you want options to be set only for given project.
#
# PROJECT_JRUBY_OPTS=( --1.9 )
#
# The variable PROJECT_JRUBY_OPTS requires the following to be run in shell:
#
#    chmod +x ${rvm_path}/hooks/after_use_jruby_opts
#

#
# First we attempt to load the desired environment directly from the environment
# file. This is very fast and efficient compared to running through the entire
# CLI and selector. If you want feedback on which environment was used then
# insert the word 'use' after --create as this triggers verbose mode.
#
if [[ -d "${rvm_path:-$HOME/.rvm}/environments" \
  && -s "${rvm_path:-$HOME/.rvm}/environments/$environment_id" ]]
then
  \. "${rvm_path:-$HOME/.rvm}/environments/$environment_id"

  if [[ -s "${rvm_path:-$HOME/.rvm}/hooks/after_use" ]]
  then
    . "${rvm_path:-$HOME/.rvm}/hooks/after_use"
  fi
else
  # If the environment file has not yet been created, use the RVM CLI to select.
  if ! rvm --create  "$environment_id"
  then
    echo "Failed to create RVM environment '${environment_id}'."
    return 1
  fi
fi

#
# If you use an RVM gemset file to install a list of gems (*.gems), you can have
# it be automatically loaded. Uncomment the following and adjust the filename if
# necessary.
#
# filename=".gems"
# if [[ -s "$filename" ]]
# then
#   rvm gemset import "$filename" | grep -v already | grep -v listed | grep -v complete | sed '/^$/d'
# fi

# If you use bundler, this might be useful to you:
# if [[ -s Gemfile ]] && ! command -v bundle >/dev/null
# then
#   printf "The rubygem 'bundler' is not installed. Installing it now.\n"
#   gem install bundler
# fi
# if [[ -s Gemfile ]] && command -v bundle
# then
#   bundle install
# fi

if [[ $- == *i* ]] # check for interactive shells
then
    echo "Using: $(tput setaf 2)$GEM_HOME$(tput sgr0)" # show the user the ruby and gemset they are using in green
else 
  echo "Using: $GEM_HOME" # don't use colors in interactive shells
fi







# The name of this business, as displayed to your users throughout the application
export BUSINESS_NAME=
# the from address used when sending email to customers, and also the email address we send admin emali to (e.g. from the conact form)
export BUSINESS_EMAIL=

# used for facebook connect, google analytics, emails and other places where a master domain name is used to represent the business
export BASE_DOMAIN_NAME=

# the database namespace used in database.yml, "foobar" will create foobar_development and foobar_test databases for MySQL and MongoDB
export DATABASE_NAMESPACE=
# mysql usernme and password
export MYSQL_USERNAME=
export MYSQL_PASSWORD=
export MYSQL_HOST=
export MYSQL_PORT=

# emails sent in development are intercepted and delivered to the developer, so we dont bombard customers by accident
export DEVELOPER_EMAIL=

# we use AWS as a backend for fog and paperclip
export AWS_ACCESS_KEY_ID=
export AWS_SECRET_ACCESS_KEY=
export S3_NAMESPACE=
export S3_CLOUDFRONT_DOMAIN=

# Memcaching
export MEMCACHE_SERVERS=

# for onmiauth with facebook and facebook connect/widgets etc
export FACEBOOK_CLIENT_ID=
export FACEBOOK_SECRET=
# for displaying to your customers
export FACEBOOK_FAN_PAGE_NAME= 
export FACEBOOK_FAN_PAGE_ID= 

# for omniauth with twitter
export TWITTER_CONSUMER_KEY=
export TWITTER_CONSUMER_SECRET=
# for displaying to your customers
export TWITTER_SCREEN_NAME=

# urchin code for google analytics
export GOOGLE_ANALYTICS_ACCOUNT_ID=
export GOOGLE_WEBMASTER_TOOLS_META=

# emails generated in development will be delivered through gmail 
export GMAIL_DOMAIN=
export GMAIL_USER_NAME=
export GMAIL_PASSWORD=